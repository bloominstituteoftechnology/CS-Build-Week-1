{"version":3,"sources":["components/Game/Game.js","components/Game/Cell.js","components/Controls/ControlsButton.js","components/Controls/Controls.js","components/InfoOverlay/InfoOverlay.js","App.js","index.js"],"names":["Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drawCanvas","canvas","refs","game","ctx","getContext","grid","slice","width","height","canvasSize","strokeStyle","fillStyle","gridColor","x","numCells","cellSize","moveTo","lineTo","y","stroke","length","cell","isAlive","color","fillRect","onGameClick","e","preventDefault","console","log","componentDidUpdate","prevProps","componentDidMount","randomize","state","buttonCommand","_this2","react_default","a","createElement","ref","className","onClick","Component","Cell","arguments","undefined","isClickable","setRandomColor","concat","Math","floor","random","toString","padStart","setRandomAlpha","randomAlpha","create","kill","toggleState","ControlsButton","onButtonClick","icon","isShowingPlay","setState","componentWillUpdate","newProps","index_es","Controls","onStepClick","step","onPlayStopClick","playStop","onClearClick","clear","onRandomizeClick","timer","ControlsButton_ControlsButton","generationNumber","InfoOverlay","onScrimClick","scrim","content","about","rules","classList","remove","onAboutClick","aboutContent","rulesContent","add","onRulesClick","isOverlayOpen","library","faPlay","faStop","faStepForward","faEraser","faQuestion","App","createGrid","NUM_CELLS","clearInterval","generationInterval","generate","newGrid","neighbors","getNeighborCount","cellX","cellY","neighborCount","stop","play","checkIsClear","setInterval","GENERATION_RATE","isClear","clientX","offsetLeft","app","clientY","offsetTop","CELL_SIZE","CANVAS_SIZE","GRID_COLOR","Game_Game","Controls_Controls","InfoOverlay_InfoOverlay","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2b73100b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      buttonCommand: null\n    };\n  }\n\n  drawCanvas = () => {\n    const canvas = this.refs.game;\n    const ctx = this.refs.game.getContext('2d');\n    const grid = this.props.grid.slice();\n    const lineOffset = 0.5;\n    const fillOffset = 1;\n\n    canvas.width = canvas.height = this.props.canvasSize;\n    ctx.strokeStyle = ctx.fillStyle = this.props.gridColor;\n    \n    for (let x = lineOffset; x < this.props.numCells * this.props.cellSize; x += this.props.cellSize) {\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, this.props.numCells * this.props.cellSize);\n    }\n\n    for (let y = lineOffset; y < this.props.numCells * this.props.cellSize; y += this.props.cellSize) {\n      ctx.moveTo(0, y);\n      ctx.lineTo(this.props.numCells * this.props.cellSize, y);\n    }\n    ctx.stroke();\n    \n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        const cell = grid[x][y];\n        if (cell.isAlive) {\n          ctx.fillStyle = cell.color;\n          ctx.fillRect(x * this.props.cellSize + fillOffset, \n            y * this.props.cellSize + fillOffset,\n            this.props.cellSize - fillOffset,\n            this.props.cellSize - fillOffset);\n        }\n      }\n    }\n\n  }\n\n  onGameClick = e => {\n    e.preventDefault();\n    this.props.onGameClick(e, this.refs.game);\n    console.log('game click');\n  };\n\n  componentDidUpdate = prevProps => {\n    this.drawCanvas();\n  }\n\n  componentDidMount = () => {\n    this.drawCanvas();\n    this.props.randomize();\n  }\n\n  render() {\n    return (\n      <canvas ref=\"game\" className=\"game\" onClick={e => this.onGameClick(e)}></canvas>\n    );\n  }\n}\n","export default class Cell {\n  constructor(isAlive = false, isClickable = false, color = 'rgba(199, 0, 37, 1)') {\n    this.isAlive = isAlive;\n    this.isClickable = isClickable;\n    this.color = color;\n  }\n\n  setRandomColor = () => {\n    this.color = `#${Math.floor(Math.random() * 0x1000000).toString(16).padStart(6, 0)}`;\n  }\n\n  setRandomAlpha = () => {\n    let randomAlpha = Math.random();\n    if (randomAlpha < .3) {\n      randomAlpha = .3;\n    }\n    this.color = `rgba(199, 0, 37, ${randomAlpha})`;\n  }\n\n  create = () => {\n    this.isAlive = true;\n  }\n\n  kill = () => {\n    this.isAlive = false;\n  }\n\n  toggleState = () => {\n    if (this.isAlive) {\n      this.isAlive = false;\n    } else {\n      this.isAlive = true;\n    }\n  }\n\n}\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport default class ControlsButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      icon: this.props.icon\n    };\n  }\n\n  onButtonClick = e => {\n    e.preventDefault();\n    this.props.onButtonClick();\n    if (this.state.icon === 'play' || this.state.icon === 'stop') {\n      if (this.props.isShowingPlay) {\n        this.setState({icon: 'play'});\n      } else {\n        this.setState({icon: 'stop'});\n      }\n    }\n  };\n\n  componentWillUpdate = newProps => {\n    if(newProps.isShowingPlay !== this.props.isShowingPlay) {\n      if (this.state.icon === 'play' || this.state.icon === 'stop') {\n        if (this.props.isShowingPlay) {\n          this.setState({icon: 'play'});\n        } else {\n          this.setState({icon: 'stop'});\n        }\n      }\n    }\n  }\n\n  render() {\n    let icon;\n    if (this.state.icon === 'play') {\n      icon = <FontAwesomeIcon icon={this.state.icon} />;\n    } else {\n      icon = <FontAwesomeIcon icon={this.state.icon} />;\n    }\n\n    return (\n      <button className='controls__button' onClick={e => this.onButtonClick(e)}>\n        {icon}\n      </button>\n    );\n  }\n}","import React, { Component } from 'react';\nimport ControlsButton from './ControlsButton';\n\nexport default class Controls extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: undefined\n    };\n  }\n\n  onStepClick = e => {\n    this.props.step();\n    console.log('step click');\n  };\n\n  onPlayStopClick = e => {\n    this.props.playStop();\n    console.log('play/stop click');\n  };\n\n  onClearClick = e => {\n    this.props.clear();\n    console.log('clear click');\n  };\n\n  onRandomizeClick = e => {\n    this.props.randomize();\n    console.log('randomize click');\n  };\n\n  render() {\n    return (\n      <div className=\"controls\">\n        <div className=\"controls__button-container\">\n          <ControlsButton icon=\"stop\" onButtonClick={this.onPlayStopClick} isShowingPlay={this.props.isShowingPlay} />\n          <ControlsButton icon=\"step-forward\" onButtonClick={this.onStepClick} isShowingPlay={this.props.isShowingPlay} />\n          <ControlsButton icon=\"eraser\" onButtonClick={this.onClearClick} isShowingPlay={this.props.isShowingPlay} />\n          <ControlsButton icon=\"question\" onButtonClick={this.onRandomizeClick} isShowingPlay={this.props.isShowingPlay} />\n        </div>\n        <div className=\"controls__generation\"><span className=\"controls__generation-number\">{this.props.generationNumber}</span> Generation</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class InfoOverlay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOverlayOpen: false\n    };\n  }\n\n  onScrimClick = e => {\n    e.preventDefault();\n    const scrim = this.refs.scrim;\n    const content = this.refs.content;\n    const about = this.refs.about;\n    const rules = this.refs.rules;\n    scrim.classList.remove('is-active');\n    content.classList.remove('is-active');\n    about.classList.remove('is-active');\n    rules.classList.remove('is-active');\n  };\n\n  onAboutClick = e => {\n    e.preventDefault();\n    const scrim = this.refs.scrim;\n    const content = this.refs.content;\n    const about = this.refs.about;\n    const rules = this.refs.rules;\n    const aboutContent = this.refs.aboutContent;\n    const rulesContent = this.refs.rulesContent;\n    scrim.classList.add('is-active');\n    content.classList.add('is-active');\n    about.classList.add('is-active');\n    rules.classList.remove('is-active');\n    aboutContent.classList.add('is-active');\n    rulesContent.classList.remove('is-active');\n  };\n\n  onRulesClick = e => {\n    e.preventDefault();\n    const scrim = this.refs.scrim;\n    const content = this.refs.content;\n    const about = this.refs.about;\n    const rules = this.refs.rules;\n    const aboutContent = this.refs.aboutContent;\n    const rulesContent = this.refs.rulesContent;\n    scrim.classList.add('is-active');\n    content.classList.add('is-active');\n    about.classList.remove('is-active');\n    rules.classList.add('is-active');\n    aboutContent.classList.remove('is-active');\n    rulesContent.classList.add('is-active');\n  };\n\n  render() {\n    return (\n      <div className=\"info-overlay\">\n        <div ref=\"scrim\" className=\"info-overlay__scrim\" onClick={e => this.onScrimClick(e)}></div>\n        <div ref=\"content\" className=\"info-overlay__content-layer\">\n          <div className=\"info-overlay-header\">\n            <span ref=\"about\" className=\"info-overlay-header__about\" onClick={e => this.onAboutClick(e)}>About</span>\n            <span ref=\"rules\" className=\"info-overlay-header__rules\" onClick={e => this.onRulesClick(e)}>Rules</span>\n          </div>\n          <div className=\"info-overlay-content\">\n            <div ref=\"aboutContent\" className=\"info-overlay-content__about\">\n              <h2>About</h2>\n              <span className=\"info-content\">\n              <p><span className=\"emphasis\">Conway’s Game of Life</span> is an example of cellular automation. It consists of a grid of cells—each following a small number of rules for life or death. While these rules are very basic, they are also linked to the existence of other cells. The result is a visualization of how a complex and unpredictable system can emerge from simple and predictable elements.</p>\n              <p>The <span className=\"emphasis\">Game of Life</span> is Turing-complete, which means that it is able to emulate the famous, hypothetical computing machine proposed by Alan Turing.</p>\n              </span>\n            </div>\n\n            <div ref=\"rulesContent\" className=\"info-overlay-content__rules\">\n              <h2>Rules</h2>\n              <span className=\"info-content\">\n                <p>In the <span className=\"emphasis\">Game of Life</span>, each cell's existence is dependent on its neighboring cells.</p>\n                <p>If a cell is alive and has 2 or 3 neighbors, then it remains alive. If it doesn't, it dies. 😭</p>\n                <p>If a cell is dead and has exactly 3 neighbors, then it comes to life! 👶 Otherwise, it remains dead.</p>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Game from './components/Game';\nimport Cell from './components/Game/Cell';\nimport Controls from './components/Controls';\nimport InfoOverlay from './components/InfoOverlay';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlay, faStop, faStepForward, faEraser, faQuestion } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\nlibrary.add([faPlay, faStop, faStepForward, faEraser, faQuestion])\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.NUM_CELLS = 58;\n    this.CANVAS_SIZE = 580;\n    this.CELL_SIZE = 10;\n    this.GRID_COLOR = '#FF9251';\n    this.GENERATION_RATE = 50;\n    this.state = {\n      generationInterval: undefined,\n      generationNumber: 0,\n      grid: this.createGrid(),\n      isShowingPlay: false\n    };\n  }\n\n  createGrid = () => {\n    const grid = [];\n\n    for (let x = 0; x < this.NUM_CELLS; x++) {\n      grid[x] = [];\n      for (let y = 0; y < this.NUM_CELLS; y++) {\n        grid[x][y] = new Cell();\n        //grid[x][y].setRandomColor();\n      }\n    }\n\n    return grid;\n  }\n\n  step = () => {\n    clearInterval(this.state.generationInterval);\n    this.setState({generationInterval: undefined});\n    this.generate();\n  }\n\n\tgenerate = () => {\n\t\tlet newGrid = [];\n\t\tfor (let x = 0; x < this.state.grid.length; x++) {\n\t\t\tnewGrid[x] = [];\n\t\t}\n\t\t\n\t\tfor (let x = 0; x < this.state.grid.length; x++) {\n\t\t\tfor (let y = 0; y < this.state.grid.length; y++) {\n\t\t\t\tlet neighbors = this.getNeighborCount(x, y);\n        let cell = new Cell();\n        cell.color = this.state.grid[x][y].color;\n        \n\t\t\t\tif (this.state.grid[x][y].isAlive) {\n\t\t\t\t\tif (neighbors === 2 || neighbors === 3) {\n            cell.create();\n          } else if (neighbors < 2 || neighbors > 3) {\n            cell.kill();\n          }\n\t\t\t\t} else {\n\t\t\t\t\tif (neighbors === 3) {\n            cell.create();\n          }\n        }\n        newGrid[x][y] = cell;\n\t\t\t}\n\t\t}\n\t\t\n    this.setState({grid: newGrid, generationNumber: this.state.generationNumber + 1});\n  }\n  \n  getNeighborCount = (cellX, cellY) => {\n\t\tlet neighborCount = 0;\n\t\t\n\t\tfor (let x = cellX - 1; x <= cellX + 1; x++) {\n\t\t\tfor (let y = cellY - 1; y <= cellY + 1; y++) {\n\t\t\t\tif (x === cellX && y === cellY) {\n          continue;\n        }\n\t\t\t\tif (x < 0 || x >= this.state.grid.length || y < 0 || y >= this.state.grid[x].length) {\n          continue;\n        }\t\n\t\t\t\tif (this.state.grid[x][y].isAlive) {\n          neighborCount++;\n        }\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn neighborCount;\n\t}\n\n  playStop = () => {\n    if (this.state.isShowingPlay) {\n      this.stop();\n    } else {\n      this.play();\n    }\n  }\n\n  stop = () => {\n    clearInterval(this.state.generationInterval);\n    this.setState({generationInterval: undefined, isShowingPlay: false});\n  }\n\n  play = () => {\n    if (this.checkIsClear()) {\n      this.randomize();\n    }\n\n    this.setState({generationInterval: setInterval(this.generate, this.GENERATION_RATE), isShowingPlay: true});\n  }\n\n  randomize = () => {\n    const randomizeLimit = 0.15;\n    let grid = this.state.grid.slice();\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        let cell = new Cell();\n        cell.setRandomAlpha();\n        if (Math.random() < randomizeLimit) {\n          cell.create();\n        } \n        grid[x][y] = cell;\n      }\n    }\n    this.setState({grid: grid, generationNumber: 0});\n  }\n\n  clear = () => {\n    let grid = this.state.grid.slice();\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        let cell = new Cell();\n        cell.kill();\n        grid[x][y] = cell;\n      }\n    }\n    this.stop();\n    this.setState({grid: grid, generationNumber: 0});\n  }\n\n  checkIsClear = () => {\n    let grid = this.state.grid.slice();\n    var isClear = true;\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        let cell = grid[x][y];\n        if (cell.isAlive) {\n          isClear = false;\n          break;\n        }\n      }\n    }\n\n    return isClear;\n  }\n\n  onGameClick = (e, game) => {\n    let x = e.clientX - game.offsetLeft - this.refs.app.offsetLeft;\n    let y = e.clientY - game.offsetTop - this.refs.app.offsetTop;\n    x = Math.floor(x / this.CELL_SIZE);\n    y = Math.floor(y / this.CELL_SIZE);\n    this.toggleState(x, y);\n  };\n\n  toggleState = (cellX, cellY) => {\n    let grid = this.state.grid.slice();\n    let cell = grid[cellX][cellY];\n    cell.toggleState();\n    this.setState({grid: grid});\n\t}\n\n  componentDidMount = () => {\n    this.play();\n  }\n\n  render() {\n    return (\n      <div ref=\"app\" className=\"app\">\n        <Game grid={this.state.grid} numCells={this.NUM_CELLS} canvasSize={this.CANVAS_SIZE} cellSize={this.CELL_SIZE} gridColor={this.GRID_COLOR} randomize={this.randomize} onGameClick={this.onGameClick} />\n        <Controls step={this.step} clear={this.clear} playStop={this.playStop} randomize={this.randomize} isShowingPlay={this.state.isShowingPlay} generationNumber={this.state.generationNumber} />\n        <InfoOverlay />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}